import java.io.FileInputStream; 
import java.io.IOException; 
import java.io.InputStreamReader; 
import java.net.URL; 
import java.util.*; 
import java.util.concurrent.*; 
import java.nio.charset.StandardCharsets; 
import javax.net.ssl.HttpsURLConnection; 
import javax.net.ssl.HostnameVerifier; 
import javax.net.ssl.SSLSession; 
import org.apache.camel.Exchange; 
import org.json.JSONArray; 
import org.json.JSONObject; 
import org.w3c.dom.Document; 
import org.w3c.dom.Element; 
import org.w3c.dom.Node; 
import org.w3c.dom.NodeList; 
import javax.xml.bind.Datatype Converter; 
import javax.xml.parsers. DocumentBuilder; 
import javax.xml.parsers. DocumentBuilderFactory; 
import org.xml.sax.InputSource; 
import java.net.http.HttpClient; 
import java.net.http.HttpRequest; 
import java.net.http.HttpResponse; 
import javax.net.ssl.KeyManagerFactory; 
import javax.net.ssl.SSLContext; 
import javax.net.ssl.TrustManagerFactory; 
import java.security.KeyStore; 
import java.time.Duration;



public class RTDRequest {
	
private static Map map1 = Collections.synchronizedMap(new HashMap());

	private static Document convertStringToXMLDocument(String xmlString) {
			//Parser that produces DOM object trees from XML content
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			 
			//API to obtain DOM Document instance
			DocumentBuilder builder = null;
			try
			{
				//Create DocumentBuilder with default configuration
				builder = factory.newDocumentBuilder();
				 
				//Parse the content to Document object
				Document doc = builder.parse(new InputSource(new StringReader(xmlString)));
				return doc;
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			}
			return null;
		}
  
	public static Map<String, String> fetchAccountInfo(String EntityID, String contactID, Map<String, String> map) {
		if ((EntityID == null || EntityID.trim().isEmpty()) && (contactID == null || contactID.trim().isEmpty())) {
				throw new IllegalArgumentException("EntityID and contactID cannot be null or empty");
		}
		String keystorePath = "/opt/sas/viya/config/etc/boss/mycert.p12"; 
		String keystorePassword = "changeit"; 
		String truststorePath = "/opt/sas/viya/config/etc/boss/custom-truststore.jks"; 
		String truststorePassword = "changeit"; 
		
		System.setProperty("https.proxyHost", "webproxy-azuan.vsp.sas.com"); 
		System.setProperty("https.proxyPort", "3128"); 
		
		// Load the keystore (client certificate) 
		KeyStore keyStore = KeyStore.getInstance("PKCS12"); 
		try (FileInputStream keyStoreInputStream = new FileInputStream(keystorePath)) { 
		keyStore.load(keyStoreInputStream, keystorePassword.toCharArray()); 
		} 
		
		// Load the truststore (CA certificates) 
		KeyStore trustStore = KeyStore.getInstance("JKS"); 
		try (FileInputStream trustStoreInputStream = new FileInputStream(truststorePath)) { 
		trustStore.load(trustStoreInputStream, truststorePassword.toCharArray()); 
		} 
		
		// Initialize KeyManagerFactory with the keystore 
		
		KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); 
		keyManagerFactory.init(keyStore, keystorePassword.toCharArray()); 
		
		// Initialize TrustManagerFactory with the truststore 
		
		TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); 
		trustManagerFactory.init(trustStore); 
			
		// Create and initialize SSLContext 
		SSLContext sslContext = SSLContext.getInstance("TLS"); 
		sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null); 
		
		// Create HttpClient with SSLContext 
		HttpClient httpClient =  HttpClient.newBuilder() 
		.version(HttpClient.Version.HTTP_2) 
		.sslContext(sslContext) // Use the custom SSLContext 
		.connectTimeout(Duration.ofSeconds (60)) 
		.build(); 
		
		// OAuth 2.0 Token Retrieval 
		String clientId= "fe82e73c-9579-4e8a-ad33-9a3b86eedcc3"; 
		String clientSecret = "b51c04e5-a205-4598-8138-426eada81e80"; 
		String scope=  "AccountDetails AccountBalancesDetails CustomerPersonalDetails"; // Ensure this is initialized 
		String grantType = "client_credentials"; 
		String tokenUrl = "https://devmag.adcb.com/auth/oauth/v2/token"; 
		System.out.println("Preparing to hit the token URL: " + tokenUrl); 
		
		// Prepare the request body for token retrieval 
		String requestBody = "client_id=" + java.net.URLEncoder.encode(clientId, Standard Charsets.UTF_8) + "&" + 
		"client_secret="+ java.net.URLEncoder.encode(clientSecret, StandardCharsets.UTF_8) + "&" + 
		"scope=" + java.net.URLEncoder.encode(scope, StandardCharsets.UTF_8) + "&" + "grant_type=" + java.net.URLEncoder.encode(grantType, StandardCharsets.UTF_8); 
		System.out.println("Token request body prepared:"+ requestBody); 
		
		
		HttpRequest tokenRequest = HttpRequest.newBuilder() 
		.uri(URI.create(tokenUrl)) 
		.header("Content-Type", "application/x-www-form-urlencoded") 
		.POST(HttpRequest.BodyPublishers.ofString(requestBody)) 
		.build(); 
		System.out.println("Sending token request..."); 
		HttpResponse<String>tokenResponse = httpClient.send(tokenRequest, HttpResponse.BodyHandlers.ofString()); 
		System.out.println("Token response received: + tokenResponse.body()); 
		
		// Parse the token response 
		JSONObject tokenJson = new JSONObject(tokenResponse.body()); 
		String accessToken = tokenJson.optString("access_token"); 
		if (accessToken == null || accessToken.isEmpty()) { 
		throw new IOException("Failed to obtain access token"); 
		} 
		System.out.println("Access token obtained: " + accessToken); 
			
			
		String customerId = contactID;
		String apiUrl = "https://devmag.adcb.com/v2/accounts/inquiry?customerId=" + customerId; 
		System.out.println("Preparing to hit the customer info API URL: + apiUrl); 
		String token1="Bearer "+accessToken; 
		HttpRequest apiRequest = HttpRequest.newBuilder() 
		.uri(URI.create(apiUrl)) 
		.header("Content-Type", "application/json") 
		.header("Authorization", token1) 
		.header("x-fapi-interaction-id", UUID.randomUUID().toString()) 
		.timeout(Duration.ofSeconds(60)) 
		.GET() 
		.build();
		
		HttpResponse<String> apiResponse = httpClient.send(apiRequest, HttpResponse.BodyHandlers.ofString()); 
		System.out.println("Response received: " + apiResponse.body());
		
			JSONObject jsonObject = new JSONObject(apiResponse.body());
			JSONObject data = jsonObject.optJSONObject("Data");
			if (data == null) {
				throw new IOException("No Data object in response");
			}
			JSONArray accountArray = data.getJSONArray("Account");
			if (accountArray == null) {
				throw new IOException("No accountArray object in response");
			}
			 // Loop through each account object in the array
			for (int i = 0; i < accountArray.length(); i++) {
				JSONObject account = accountArray.optJSONObject(i);
				
				
				// Create variables for each field in the account
				String AccountId = account.optString("AccountId", "");
				if(AccountId.equals(EntityID)){
				String Status = account.optString("Status", "");
				String Currency = account.optString("Currency", "");
				String AccountType = account.optString("AccountType", "");
				String accountSubType = account.optString("AccountSubType", "");
				String productCode = account.optString("ProductCode", "");
				String Description = account.optString("Description", "");
				String OpeningDate = account.optString("OpeningDate", "");
				String maturityDate = account.optString("MaturityDate", "");
				String loanAmount = account.optString("LoanAmount", "");
				String tenor = account.optString("Tenor", "");
				String interestRate = account.optString("InterestRate", "");
				String emiAmount = account.optString("EMIAmount", "");
				String nextEmiDate = account.optString("NextEMIDate", "");
				String numberOfEmiPaid = account.optString("NumberOfEMIPaid", "");
				String outstandingBalance = account.optString("OutstandingBalance", "");
				String repaymentFrequency = account.optString("RepaymentFrequency", "");

				// Store variables in map with unique keys for each account entry
				map.put("AccountId", AccountId);
				map.put("Account_Status", Status);
				map.put("Account_Type", AccountType);
				map.put("Account_Description", Description);
				map.put("Account_OpeningDate", OpeningDate);
				map.put("Account_Currency", Currency);
				fetchBalanceInfo(entityID,contactID,map,accessToken);
				fetchContactInfo(entityID,map,accessToken);
				}
			}
			return map;	
		
	}	
	
	
	
	public static void fetchBalanceInfo(String EntityID, String contactID, Map<String, String> map, String accessToken)  {
		
		
		String keystorePath = "/opt/sas/viya/config/etc/boss/mycert.p12"; 
		String keystorePassword = "changeit"; 
		String truststorePath = "/opt/sas/viya/config/etc/boss/custom-truststore.jks"; 
		String truststorePassword = "changeit"; 
		
		System.setProperty("https.proxyHost", "webproxy-azuan.vsp.sas.com"); 
		System.setProperty("https.proxyPort", "3128"); 
		
		// Load the keystore (client certificate) 
		KeyStore keyStore = KeyStore.getInstance("PKCS12"); 
		try (FileInputStream keyStoreInputStream = new FileInputStream(keystorePath)) { 
		keyStore.load(keyStoreInputStream, keystorePassword.toCharArray()); 
		} 
		
		// Load the truststore (CA certificates) 
		KeyStore trustStore = KeyStore.getInstance("JKS"); 
		try (FileInputStream trustStoreInputStream = new FileInputStream(truststorePath)) { 
		trustStore.load(trustStoreInputStream, truststorePassword.toCharArray()); 
		} 
		
		// Initialize KeyManagerFactory with the keystore 
		
		KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); 
		keyManagerFactory.init(keyStore, keystorePassword.toCharArray()); 
		
		// Initialize TrustManagerFactory with the truststore 
		
		TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); 
		trustManagerFactory.init(trustStore); 
			
		// Create and initialize SSLContext 
		SSLContext sslContext = SSLContext.getInstance("TLS"); 
		sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null); 
		
		// Create HttpClient with SSLContext 
		HttpClient httpClient =  HttpClient.newBuilder() 
		.version(HttpClient.Version.HTTP_2) 
		.sslContext(sslContext) // Use the custom SSLContext 
		.connectTimeout(Duration.ofSeconds (60)) 
		.build(); 
		
		
		
			
		String customerId = contactID;
		String apiUrl = "https://devmag.adcb.com/v2/balances?customerId=" + customerId;
		System.out.println("Preparing to hit the customer info API URL: + apiUrl); 
		String token1="Bearer "+accessToken; 
		HttpRequest apiRequest = HttpRequest.newBuilder() 
		.uri(URI.create(apiUrl)) 
		.header("Content-Type", "application/json") 
		.header("Authorization", token1) 
		.header("x-fapi-interaction-id", UUID.randomUUID().toString()) 
		.timeout(Duration.ofSeconds(60)) 
		.GET() 
		.build();
		HttpResponse<String> apiResponse = httpClient.send(apiRequest, HttpResponse.BodyHandlers.ofString()); 
		System.out.println("Response received: " + apiResponse.body());
			JSONObject jsonObject = new JSONObject(apiResponse.body());
			JSONObject data = jsonObject.optJSONObject("Data");
			if (data == null) {
				throw new IOException("No Data object in response");
			}
			JSONArray balanceArray = data.getJSONArray("Balance");
			if (balanceArray == null) {
				throw new IOException("No balanceArray object in response");
			}
			// Loop through each balance object in the array
			for (int i = 0; i < balanceArray.length(); i++) {
				JSONObject balance = balanceArray.optJSONObject(i);

				// Extracting balance fields
				String accountId = balance.optString("AccountId", "");
				String Amount="";
				
				if (accountId.equals(EntityID)) {
					JSONObject amountObject = balance.optJSONObject("Amount");
					Amount = amountObject.optString("Amount","");
					String creditDebitIndicator = balance.optString("CreditDebitIndicator", "");
					String type = balance.optString("Type", "");
					String dateTime = balance.optString("DateTime", "");
					String amountOnHold = balance.optString("AmountOnHold", "");
					String AmountAvailable = balance.optString("AmountAvailable", "");
					// Map these values with unique keys
					map.put("Balance_Amount", Amount);
					map.put("AmountAvailable", AmountAvailable);
				}
	     	}	
	}
  
    public static void fetchContactInfo(String EntityID, Map<String, String> map, String accessToken) {
		
		String keystorePath = "/opt/sas/viya/config/etc/boss/mycert.p12"; 
		String keystorePassword = "changeit"; 
		String truststorePath = "/opt/sas/viya/config/etc/boss/custom-truststore.jks"; 
		String truststorePassword = "changeit"; 
		
		System.setProperty("https.proxyHost", "webproxy-azuan.vsp.sas.com"); 
		System.setProperty("https.proxyPort", "3128"); 
		
		// Load the keystore (client certificate) 
		KeyStore keyStore = KeyStore.getInstance("PKCS12"); 
		try (FileInputStream keyStoreInputStream = new FileInputStream(keystorePath)) { 
		keyStore.load(keyStoreInputStream, keystorePassword.toCharArray()); 
		} 
		
		// Load the truststore (CA certificates) 
		KeyStore trustStore = KeyStore.getInstance("JKS"); 
		try (FileInputStream trustStoreInputStream = new FileInputStream(truststorePath)) { 
		trustStore.load(trustStoreInputStream, truststorePassword.toCharArray()); 
		} 
		
		// Initialize KeyManagerFactory with the keystore 
		
		KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); 
		keyManagerFactory.init(keyStore, keystorePassword.toCharArray()); 
		
		// Initialize TrustManagerFactory with the truststore 
		
		TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); 
		trustManagerFactory.init(trustStore); 
			
		// Create and initialize SSLContext 
		SSLContext sslContext = SSLContext.getInstance("TLS"); 
		sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null); 
		
		// Create HttpClient with SSLContext 
		HttpClient httpClient =  HttpClient.newBuilder() 
		.version(HttpClient.Version.HTTP_2) 
		.sslContext(sslContext) // Use the custom SSLContext 
		.connectTimeout(Duration.ofSeconds (60)) 
		.build(); 
		
			String customerId = EntityID;
			String apiUrl = "https://devmag.adcb.com/v2/customer/details?customerId=" + customerId; 
		System.out.println("Preparing to hit the customer info API URL: + apiUrl); 
		String token1="Bearer "+accessToken; 
		HttpRequest apiRequest = HttpRequest.newBuilder() 
		.uri(URI.create(apiUrl)) 
		.header("Content-Type", "application/json") 
		.header("Authorization", token1) 
		.header("x-fapi-interaction-id", UUID.randomUUID().toString()) 
		.timeout(Duration.ofSeconds(60)) 
		.GET() 
		.build(); 
		
		System.out.println("Authorization Header Sent: " + apiRequest.headers().map().get("Authorization")); 
		System.out.println("Connection established to" + apiUrl); 
		HttpResponse<String> apiResponse = httpClient.send(apiRequest, HttpResponse.BodyHandlers.ofString()); 
		System.out.println("Response received: " + apiResponse.body());

			// Parse JSON response according to the provided schema
			JSONObject jsonObject = new JSONObject(apiResponse.body());
			JSONObject data = jsonObject.optJSONObject("Data");
			if (data == null) {
				throw new IOException("No Data object in response");
			}

			JSONObject customer = data.optJSONObject("Customer");
			if (customer == null) {
				throw new IOException("No Customer object in response");
			}

			JSONObject customerPersonalDetails = customer.optJSONObject("CustomerPersonalDetails");
			if (customerPersonalDetails == null) {
				throw new IOException("No CustomerPersonal Details in response");
			}

			// Parse Contact Details
			JSONObject contactDetails = customerPersonalDetails.optJSONObject("ContactDetails");
			if (contactDetails != null) {
				map.put("ADDRESS_ZIP", contactDetails.optString("AddressZip", ""));
				map.put("COUNTRY", contactDetails.optString("Country", ""));
				map.put("CITY", contactDetails.optString("City", ""));
				map.put("HOME_LANDLINE_NUMBER", contactDetails.optString("HomeLandlineNumber", ""));
				map.put("ADDRESS_LINE_1", contactDetails.optString("AddressLine1", ""));
				map.put("ADDRESS_LINE_2", contactDetails.optString("AddressLine2", ""));
				map.put("ADDRESS_LINE_3", contactDetails.optString("AddressLine3", ""));
				map.put("MOBILE_NUMBER", contactDetails.optString("MobileNumber", ""));
				map.put("PHONE_NUMBER", contactDetails.optString("PhoneNumber", ""));
				map.put("EMAIL_ID", contactDetails.optString("EmailId", ""));
				map.put("STATE", contactDetails.optString("State", ""));
				map.put("OFFICE_LANDLINE_NUMBER", contactDetails.optString("OfficeLandlineNumber", ""));
				map.put("FAX", contactDetails.optString("Fax", ""));
			}

			// Parse Personal Info
			JSONObject personalInfo = customerPersonalDetails.optJSONObject("PersonalInfo");
			if (personalInfo != null) {
				map.put("GENDER", personalInfo.optString("Gender", ""));
				map.put("NON_RESIDENT_FLAG", personalInfo.optString("ResidencyStatus", ""));
				map.put("CUSTOMER_SINCE", personalInfo.optString("RegistrationDate", ""));
				map.put("MOTHER_MAIDEN_NAME", personalInfo.optString("MotherMaidenName", ""));
				
				String fullName = personalInfo.optString("FullName", "").trim();
				map.put("FULL_NAME", fullName);
				map.put("CUST_RM_NAME", personalInfo.optString("RMName", ""));
				map.put("NATIONALITY", personalInfo.optString("NationalityDesc", ""));
				map.put("MARITIAL_STATUS", personalInfo.optString("MaritalStatus", ""));
				String category = personalInfo.optString("Category", "");
				map.put("CUSTOMER_TYPE", category);
				map.put("ROYAL_FLAG", category);
				map.put("VIP_FLAG", category);
				map.put("PEP_FLAG", category);
				map.put("CUSTOMER_SEGMENT", category);
				map.put("LANGUAGE_PREFERENCE", personalInfo.optString("LanguagePreference", ""));
				map.put("DATE_OF_BIRTH", personalInfo.optString("DateofBirth", ""));
			}

			// Parse Employer Info
			JSONObject employerInfo = customerPersonalDetails.optJSONObject("EmployerInfo");
			if (employerInfo != null) {
				map.put("DESIGNATION", employerInfo.optString("Designation", ""));
			}

			// Parse KYC Info
			JSONObject kycInfo = customerPersonalDetails.optJSONObject("KYCInfo");
			if (kycInfo != null) {
				map.put("PASSPORT_NUMBER", kycInfo.optString("PassportNumber", ""));
				map.put("PASSPORT_EXPIRY_DT", kycInfo.optString("ExpiryDate", ""));
				map.put("VISA_EXPIRY_DT", kycInfo.optString("VisaExpiryDate", ""));
				map.put("EMIRATES_ID_EXPIRY_DT", kycInfo.optString("UAENationalIdExpiryDate", ""));
				map.put("VISA_NUMBER", kycInfo.optString("VisaNumber", ""));
				map.put("TRADE_LICENSE_NUM", kycInfo.optString("TradeLicenseNumber", ""));
				map.put("UAE_NATIONAL_ID", kycInfo.optString("UAENationalId", ""));
			}
	}
	
	
	
	public static Map<String, String> fetchCustomerInfo(String EntityID, Map<String, String> map) throws IOException {
		if (EntityID == null || EntityID.trim().isEmpty()) {
			throw new IllegalArgumentException("EntityID cannot be null or empty");
		}
		// SSL Configuration for MTLS 
		String keystorePath = "/opt/sas/viya/config/etc/boss/mycert.p12"; 
		String keystorePassword = "changeit"; 
		String truststorePath = "/opt/sas/viya/config/etc/boss/custom-truststore.jks"; 
		String truststorePassword = "changeit"; 
		
		System.setProperty("https.proxyHost", "webproxy-azuan.vsp.sas.com"); 
		System.setProperty("https.proxyPort", "3128"); 
		
		// Load the keystore (client certificate) 
		KeyStore keyStore = KeyStore.getInstance("PKCS12"); 
		try (FileInputStream keyStoreInputStream = new FileInputStream(keystorePath)) { 
		keyStore.load(keyStoreInputStream, keystorePassword.toCharArray()); 
		} 
		
		// Load the truststore (CA certificates) 
		KeyStore trustStore = KeyStore.getInstance("JKS"); 
		try (FileInputStream trustStoreInputStream = new FileInputStream(truststorePath)) { 
		trustStore.load(trustStoreInputStream, truststorePassword.toCharArray()); 
		} 
		
		// Initialize KeyManagerFactory with the keystore 
		
		KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); 
		keyManagerFactory.init(keyStore, keystorePassword.toCharArray()); 
		
		// Initialize TrustManagerFactory with the truststore 
		
		TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); 
		trustManagerFactory.init(trustStore); 
			
		// Create and initialize SSLContext 
		SSLContext sslContext = SSLContext.getInstance("TLS"); 
		sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null); 
		
		// Create HttpClient with SSLContext 
		HttpClient httpClient =  HttpClient.newBuilder() 
		.version(HttpClient.Version.HTTP_2) 
		.sslContext(sslContext) // Use the custom SSLContext 
		.connectTimeout(Duration.ofSeconds(60)) 
		.build(); 
		
		// OAuth 2.0 Token Retrieval 
		String clientId= "fe82e73c-9579-4e8a-ad33-9a3b86eedcc3"; 
		String clientSecret = "b51c04e5-a205-4598-8138-426eada81e80"; 
		String scope=  "AccountDetails AccountBalancesDetails CustomerPersonalDetails"; // Ensure this is initialized 
		String grantType = "client_credentials"; 
		String tokenUrl = "https://devmag.adcb.com/auth/oauth/v2/token"; 
		System.out.println("Preparing to hit the token URL: " + tokenUrl); 
		
		// Prepare the request body for token retrieval 
		String requestBody = "client_id=" + java.net.URLEncoder.encode(clientId, Standard Charsets.UTF_8) + "&" + 
		"client_secret="+ java.net.URLEncoder.encode(clientSecret, StandardCharsets.UTF_8) + "&" + 
		"scope=" + java.net.URLEncoder.encode(scope, StandardCharsets.UTF_8) + "&" + "grant_type=" + java.net.URLEncoder.encode(grantType, StandardCharsets.UTF_8); 
		System.out.println("Token request body prepared:"+ requestBody); 
		
		
		HttpRequest tokenRequest = HttpRequest.newBuilder() 
		.uri(URI.create(tokenUrl)) 
		.header("Content-Type", "application/x-www-form-urlencoded") 
		.POST(HttpRequest.BodyPublishers.ofString(requestBody)) 
		.build(); 
		System.out.println("Sending token request..."); 
		HttpResponse<String>tokenResponse = httpClient.send(tokenRequest, HttpResponse.BodyHandlers.ofString()); 
		System.out.println("Token response received: + tokenResponse.body()); 
		
		// Parse the token response 
		JSONObject tokenJson = new JSONObject(tokenResponse.body()); 
		String accessToken = tokenJson.optString("access_token"); 
		if (accessToken == null || accessToken.isEmpty()) { 
		throw new IOException("Failed to obtain access token"); 
		} 
		System.out.println("Access token obtained: " + accessToken); 
		
		// Fetch customer details using the access token 
		String customerId = "715791"; 
		String apiUrl = "https://devmag.adcb.com/v2/customer/details?customerId=" + customerId; 
		System.out.println("Preparing to hit the customer info API URL: + apiUrl); 
		String token1="Bearer "+accessToken; 
		HttpRequest apiRequest = HttpRequest.newBuilder() 
		.uri(URI.create(apiUrl)) 
		.header("Content-Type", "application/json") 
		.header("Authorization", token1) 
		.header("x-fapi-interaction-id", UUID.randomUUID().toString()) 
		.timeout(Duration.ofSeconds(60)) 
		.GET() 
		.build(); 
		
		System.out.println("Authorization Header Sent: " + apiRequest.headers().map().get("Authorization")); 
		System.out.println("Connection established to" + apiUrl); 
		HttpResponse<String> apiResponse = httpClient.send(apiRequest, HttpResponse.BodyHandlers.ofString()); 
		System.out.println("Response received: " + apiResponse.body());
		
			// Parse JSON response according to the provided schema
			JSONObject jsonObject = new JSONObject(apiResponse.body());
			JSONObject data = jsonObject.optJSONObject("Data");
			if (data == null) {
				throw new IOException("No Data object in response");
			}

			JSONObject customer = data.optJSONObject("Customer");
			if (customer == null) {
				throw new IOException("No Customer object in response");
			}

			JSONObject customerPersonalDetails = customer.optJSONObject("CustomerPersonalDetails");
			if (customerPersonalDetails == null) {
				throw new IOException("No CustomerPersonalDetails in response");
			}

			// Parse Contact Details
			JSONObject contactDetails = customerPersonalDetails.optJSONObject("ContactDetails");
			if (contactDetails != null) {
				map.put("ADDRESS_ZIP", contactDetails.optString("AddressZip", ""));
				map.put("COUNTRY", contactDetails.optString("Country", ""));
				map.put("CITY", contactDetails.optString("City", ""));
				map.put("HOME_LANDLINE_NUMBER", contactDetails.optString("HomeLandlineNumber", ""));
				map.put("ADDRESS_LINE_1", contactDetails.optString("AddressLine1", ""));
				map.put("ADDRESS_LINE_2", contactDetails.optString("AddressLine2", ""));
				map.put("ADDRESS_LINE_3", contactDetails.optString("AddressLine3", ""));
				map.put("MOBILE_NUMBER", contactDetails.optString("MobileNumber", ""));
				map.put("PHONE_NUMBER", contactDetails.optString("PhoneNumber", ""));
				map.put("EMAIL_ID", contactDetails.optString("EmailId", ""));
				map.put("STATE", contactDetails.optString("State", ""));
				map.put("OFFICE_LANDLINE_NUMBER", contactDetails.optString("OfficeLandlineNumber", ""));
				map.put("FAX", contactDetails.optString("Fax", ""));
			}

			// Parse Personal Info
			JSONObject personalInfo = customerPersonalDetails.optJSONObject("PersonalInfo");
			if (personalInfo != null) {
				map.put("GENDER", personalInfo.optString("Gender", ""));
				map.put("NON_RESIDENT_FLAG", personalInfo.optString("ResidencyStatus", ""));
				map.put("CUSTOMER_SINCE", personalInfo.optString("RegistrationDate", ""));
				map.put("MOTHER_MAIDEN_NAME", personalInfo.optString("MotherMaidenName", ""));
				
				String fullName = personalInfo.optString("FullName", "").trim();
				map.put("FULL_NAME", fullName);

				// Process name parts
				if (!fullName.isEmpty()) {
					String[] nameParts = fullName.split("\\s+");
					if (nameParts.length >= 3) {
						map.put("FIRST_NAME", nameParts[0]);
						map.put("MIDDLE_NAME", nameParts[1]);
						map.put("LAST_NAME", nameParts[2]);
					} else if (nameParts.length == 2) {
						map.put("FIRST_NAME", nameParts[0]);
						map.put("MIDDLE_NAME", "");
						map.put("LAST_NAME", nameParts[1]);
					} else if (nameParts.length == 1) {
						map.put("FIRST_NAME", nameParts[0]);
						map.put("MIDDLE_NAME", "");
						map.put("LAST_NAME", "");
					}
				} else {
					map.put("FIRST_NAME", "");
					map.put("MIDDLE_NAME", "");
					map.put("LAST_NAME", "");
				}

				map.put("CUST_RM_NAME", personalInfo.optString("RMName", ""));
				map.put("NATIONALITY", personalInfo.optString("NationalityDesc", ""));
				map.put("MARITIAL_STATUS", personalInfo.optString("MaritalStatus", ""));
				String category = personalInfo.optString("Category", "");
				map.put("CUSTOMER_TYPE", category);
				map.put("ROYAL_FLAG", category);
				map.put("VIP_FLAG", category);
				map.put("PEP_FLAG", category);
				map.put("CUSTOMER_SEGMENT", category);
				map.put("LANGUAGE_PREFERENCE", personalInfo.optString("LanguagePreference", ""));
				map.put("DATE_OF_BIRTH", personalInfo.optString("DateofBirth", ""));
			}

			// Parse Employer Info
			JSONObject employerInfo = customerPersonalDetails.optJSONObject("EmployerInfo");
			if (employerInfo != null) {
				map.put("DESIGNATION", employerInfo.optString("Designation", ""));
			}

			// Parse KYC Info
			JSONObject kycInfo = customerPersonalDetails.optJSONObject("KYCInfo");
			if (kycInfo != null) {
				map.put("PASSPORT_NUMBER", kycInfo.optString("PassportNumber", ""));
				map.put("PASSPORT_EXPIRY_DT", kycInfo.optString("ExpiryDate", ""));
				map.put("VISA_EXPIRY_DT", kycInfo.optString("VisaExpiryDate", ""));
				map.put("EMIRATES_ID_EXPIRY_DT", kycInfo.optString("UAENationalIdExpiryDate", ""));
				map.put("VISA_NUMBER", kycInfo.optString("VisaNumber", ""));
				map.put("TRADE_LICENSE_NUM", kycInfo.optString("TradeLicenseNumber", ""));
				map.put("UAE_NATIONAL_ID", kycInfo.optString("UAENationalId", ""));
			}
			return map;
	}
				
	
	
	public void prepareADCBResponse(Exchange exchange) {
		String textXml = exchange.getIn().getBody();
		//System.out.println(textXml);
		String textXml1 = textXml.replace('"','/');
		String[] splitXml = textXml1.split("entityType=/", 2);
		String newXml1 = splitXml[1].replaceFirst("/>", "</entityType>");
		String textXml2 = "<entityRequest><entityType>" + newXml1;

		Document doc = convertStringToXMLDocument(textXml2);
		Map map = new HashMap();

		String entityType = null;
		String entityID = null;
		String multiOrg = null;
		String username = null;
		String contactID = null;
		String contactType = null;
		try 
			{
				doc.getDocumentElement().normalize();
					NodeList nList = doc.getElementsByTagName("entityRequest");
					Node nNode = nList.item(0);
					
					Element eElement = (Element) nNode;
					entityType = (eElement.getElementsByTagName("entityType")).item(0).getTextContent();
			        entityID = (eElement.getElementsByTagName("entityID")).item(0).getTextContent();
					multiOrg = (eElement.getElementsByTagName("multiOrg")).item(0).getTextContent();
					username = (eElement.getElementsByTagName("username")).item(0).getTextContent(); /* Release 2 Addition*/
					if((eElement.getElementsByTagName("contactID").item(0)) != null)
					{	contactID = (eElement.getElementsByTagName("contactID")).item(0).getTextContent(); }
					if((eElement.getElementsByTagName("contactType")).item(0) != null)
					{	contactType = (eElement.getElementsByTagName("contactType")).item(0).getTextContent(); }
						
			} catch (Exception e) {
				e.printStackTrace();
		}
		
		switch (entityType)
			{
			case "A" : 
				try {
					TimeLimitedCodeBlock.runWithTimeout(new Runnable() {
						@Override
						public void run() {
							try {
								MultifetchAccountInfo m1= new MultifetchAccountInfo(entityID,contactID);
								Thread t1= new Thread(m1);
								
								t1.start(); 
								

								t1.join();
							
								//mapThread.putAll(map1);

							}
							catch (InterruptedException e) {
								System.out.println("was interuupted! 1");
							}
						}
					}, 3, TimeUnit.SECONDS);
				}
				catch (TimeoutException e) {
					System.out.println("Got timeout! 2");
				}
				break;    
			case "X" : 
				try {
					TimeLimitedCodeBlock.runWithTimeout(new Runnable() {
						@Override
						public void run() {
							try {
								MultifetchCustomerInfo m2= new MultifetchCustomerInfo(entityID);
								Thread t2= new Thread(m2);
								
								
				
								t2.start(); 
								t2.join();
								
							
							}
							catch (InterruptedException e) {
								System.out.println("was interuupted! 3");
							}
						}
					}, 3, TimeUnit.SECONDS);
				}
				catch (TimeoutException e) {
					System.out.println("Got timeout! 4");
				}
				break;
}
map.putAll(map1);


	if (contactType == null)
			contactType = "Customer Id Missing";
		if (contactID == null)
			contactID = "Customer Id Missing";

		if (entityType == 'X')
		{
			contactType = entityType;
			contactID = entityID;	
		}
			
		map.put("/entityRequest/entityType", entityType);
		map.put("/entityRequest/entityID", entityID);
		map.put("/entityRequest/multiOrg", multiOrg);
		map.put("/entityRequest/contactID", contactID);
		map.put("/entityRequest/contactType", contactType);
		
			exchange.getIn().setBody(map);

    
}

}




class MultifetchCustomerInfo implements Runnable{  
    
	private String entityID;

	public MultifetchCustomerInfo(String _entityID) {
		this.entityID = _entityID;
	}
	
    @Override
	public void run(){  
		RTDRequest.fetchCustomerInfo(entityID,RTDRequest.map1); 
	}
}

class MultifetchAccountInfo implements Runnable{  
	
	private String entityID;
	private String contactID;

	public MultifetchAccountInfo(String _entityID, String _contactID) {
		this.entityID = _entityID;
		this.contactID=_contactID;
	}
	
    @Override
	public void run(){  
		RTDRequest.fetchAccountInfo(entityID,contactID,RTDRequest.map1); 
	}
}


class TimeLimitedCodeBlock {

	public static void runWithTimeout(final Runnable runnable, long timeout, TimeUnit timeUnit) throws Exception {
		runWithTimeout(new Callable<Object>() {
			@Override
			public Object call() throws Exception {
				runnable.run();
				return null;
			}
		}, timeout, timeUnit);
	}

	public static <T> T runWithTimeout(Callable<T> callable, long timeout, TimeUnit timeUnit) throws Exception {
		final ExecutorService executor = Executors.newSingleThreadExecutor();
		final Future<T> future = executor.submit(callable);
		executor.shutdown(); // This does not cancel the already-scheduled task.
		try {
			return future.get(timeout, timeUnit);
		}
		catch (TimeoutException e) {
			future.cancel(true);
			throw e;
		}
		catch (ExecutionException e) {
			//unwrap the root cause
			Throwable t = e.getCause();
			if (t instanceof Error) {
				throw (Error) t;
			} else if (t instanceof Exception) {
				throw (Exception) t;
			} else {
				throw new IllegalStateException(t);
			}
		}
	}

}
